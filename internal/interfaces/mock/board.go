// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/interfaces/board.go
//
// Generated by this command:
//
//	mockgen -source=./internal/interfaces/board.go -destination=./internal/interfaces/mock/board.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	entities "github.com/rm-ryou/sample_todo_app/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockBoardRepository is a mock of BoardRepository interface.
type MockBoardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBoardRepositoryMockRecorder
	isgomock struct{}
}

// MockBoardRepositoryMockRecorder is the mock recorder for MockBoardRepository.
type MockBoardRepositoryMockRecorder struct {
	mock *MockBoardRepository
}

// NewMockBoardRepository creates a new mock instance.
func NewMockBoardRepository(ctrl *gomock.Controller) *MockBoardRepository {
	mock := &MockBoardRepository{ctrl: ctrl}
	mock.recorder = &MockBoardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBoardRepository) EXPECT() *MockBoardRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBoardRepository) Create(board *entities.Board) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", board)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBoardRepositoryMockRecorder) Create(board any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBoardRepository)(nil).Create), board)
}

// Delete mocks base method.
func (m *MockBoardRepository) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBoardRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBoardRepository)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockBoardRepository) GetAll() ([]*entities.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entities.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockBoardRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBoardRepository)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockBoardRepository) GetById(id int) (*entities.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*entities.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockBoardRepositoryMockRecorder) GetById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockBoardRepository)(nil).GetById), id)
}

// Update mocks base method.
func (m *MockBoardRepository) Update(board *entities.Board) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", board)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBoardRepositoryMockRecorder) Update(board any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBoardRepository)(nil).Update), board)
}

// MockBoardServicer is a mock of BoardServicer interface.
type MockBoardServicer struct {
	ctrl     *gomock.Controller
	recorder *MockBoardServicerMockRecorder
	isgomock struct{}
}

// MockBoardServicerMockRecorder is the mock recorder for MockBoardServicer.
type MockBoardServicerMockRecorder struct {
	mock *MockBoardServicer
}

// NewMockBoardServicer creates a new mock instance.
func NewMockBoardServicer(ctrl *gomock.Controller) *MockBoardServicer {
	mock := &MockBoardServicer{ctrl: ctrl}
	mock.recorder = &MockBoardServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBoardServicer) EXPECT() *MockBoardServicerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBoardServicer) Create(name string, priority, roomId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, priority, roomId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBoardServicerMockRecorder) Create(name, priority, roomId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBoardServicer)(nil).Create), name, priority, roomId)
}

// Delete mocks base method.
func (m *MockBoardServicer) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBoardServicerMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBoardServicer)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockBoardServicer) GetAll() ([]*entities.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entities.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockBoardServicerMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBoardServicer)(nil).GetAll))
}

// Update mocks base method.
func (m *MockBoardServicer) Update(id int, name string, priority int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, name, priority)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBoardServicerMockRecorder) Update(id, name, priority any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBoardServicer)(nil).Update), id, name, priority)
}
