// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/interfaces/room.go
//
// Generated by this command:
//
//	mockgen -source=./internal/interfaces/room.go -destination=./internal/interfaces/mock/room.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	entities "github.com/rm-ryou/sample_todo_app/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockRoomRepository is a mock of RoomRepository interface.
type MockRoomRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoomRepositoryMockRecorder
	isgomock struct{}
}

// MockRoomRepositoryMockRecorder is the mock recorder for MockRoomRepository.
type MockRoomRepositoryMockRecorder struct {
	mock *MockRoomRepository
}

// NewMockRoomRepository creates a new mock instance.
func NewMockRoomRepository(ctrl *gomock.Controller) *MockRoomRepository {
	mock := &MockRoomRepository{ctrl: ctrl}
	mock.recorder = &MockRoomRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomRepository) EXPECT() *MockRoomRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRoomRepository) Create(room *entities.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", room)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRoomRepositoryMockRecorder) Create(room any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoomRepository)(nil).Create), room)
}

// Delete mocks base method.
func (m *MockRoomRepository) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoomRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoomRepository)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockRoomRepository) GetAll() ([]*entities.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entities.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRoomRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRoomRepository)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockRoomRepository) GetById(id int) (*entities.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*entities.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockRoomRepositoryMockRecorder) GetById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRoomRepository)(nil).GetById), id)
}

// Update mocks base method.
func (m *MockRoomRepository) Update(room *entities.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", room)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRoomRepositoryMockRecorder) Update(room any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoomRepository)(nil).Update), room)
}

// MockRoomServicer is a mock of RoomServicer interface.
type MockRoomServicer struct {
	ctrl     *gomock.Controller
	recorder *MockRoomServicerMockRecorder
	isgomock struct{}
}

// MockRoomServicerMockRecorder is the mock recorder for MockRoomServicer.
type MockRoomServicerMockRecorder struct {
	mock *MockRoomServicer
}

// NewMockRoomServicer creates a new mock instance.
func NewMockRoomServicer(ctrl *gomock.Controller) *MockRoomServicer {
	mock := &MockRoomServicer{ctrl: ctrl}
	mock.recorder = &MockRoomServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomServicer) EXPECT() *MockRoomServicerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRoomServicer) Create(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRoomServicerMockRecorder) Create(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoomServicer)(nil).Create), name)
}

// Delete mocks base method.
func (m *MockRoomServicer) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoomServicerMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoomServicer)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockRoomServicer) GetAll() ([]*entities.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entities.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRoomServicerMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRoomServicer)(nil).GetAll))
}

// Update mocks base method.
func (m *MockRoomServicer) Update(id int, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRoomServicerMockRecorder) Update(id, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoomServicer)(nil).Update), id, name)
}
